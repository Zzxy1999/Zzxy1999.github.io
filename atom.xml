<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zzxy&#39;s Blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2025-01-24T16:18:19.371Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Zzxy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>6.s081 pgtbl &amp; cow</title>
    <link href="http://example.com/2025/01/23/6-s081-pgtbl-cow/"/>
    <id>http://example.com/2025/01/23/6-s081-pgtbl-cow/</id>
    <published>2025-01-22T16:50:53.000Z</published>
    <updated>2025-01-24T16:18:19.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-虚拟内存与页表"><a href="#1-虚拟内存与页表" class="headerlink" title="1. 虚拟内存与页表"></a>1. 虚拟内存与页表</h1><h2 id="1-1-虚拟内存"><a href="#1-1-虚拟内存" class="headerlink" title="1.1 虚拟内存"></a>1.1 虚拟内存</h2><p>虚拟内存是os对内存的一种管理技术，它提供给每个进程独立的虚拟地址空间，对进程来说只看得到虚拟地址，在cpu执行内存操作时，MMU把虚拟地址转换为物理地址再进行实际的内存访问。</p><h2 id="1-2-页表"><a href="#1-2-页表" class="headerlink" title="1.2 页表"></a>1.2 页表</h2><p>虚拟内存到物理内存的映射靠的是页表，页表的一个条目叫PTE。如果现在知道了页表，我们就能用它计算出一个虚拟地址对应的物理地址，计算方法大概是索引+地址组合。xv6采用的是3级页表，所以需要计算三轮才可以得到相应的物理地址。</p><p>页表是os管理并设置在内存中的，那么MMU是怎么用页表的呢？xv6会把当前的页表根地址放在$satp寄存器，MMU根据该寄存器中的页表地址就可以计算物理地址了。</p><p>另外计算机一般都有TLB作为更高层次的缓存，如果虚拟地址命中了TLB，那么就不要到内存一步步查页表了。需要注意的是TLB内用户虚拟地址映射是和进程相关的，所以切换进程时，上一个进程的记录就不能使用了（仅用户空间地址）。</p><h1 id="2-内核内存管理"><a href="#2-内核内存管理" class="headerlink" title="2. 内核内存管理"></a>2. 内核内存管理</h1><h2 id="2-1-内核地址空间映射"><a href="#2-1-内核地址空间映射" class="headerlink" title="2.1 内核地址空间映射"></a>2.1 内核地址空间映射</h2><p><img src="/2025/01/15/6-s081-syscall/w/kmem.png"><br>xv6内核态下物理地址和虚拟地址是直接映射的，也就是说虚拟地址和物理地址相同，不过有两个例外：</p><ul><li>trampoline：trampoline是一段代码，主要用于发生trap是内核态和用户态之间的切换。trampoline加载在物理内存中，分别映射到了内核和用户空间。</li><li>guard page：每一个进程虽然都是一个内核空间，但是却有着不同的内核栈，所以为了防止内核栈的溢出，每个内核栈之间都被映射了一段guard page，在PTE上置合适的访问位，进行地址解析的时候就可以防止栈溢出了。</li></ul><h2 id="2-2-内核内存管理"><a href="#2-2-内核内存管理" class="headerlink" title="2.2 内核内存管理"></a>2.2 内核内存管理</h2><p>先说一下之前遇到的坑：xv6的内核栈是有限制的且不能伸缩，所以在内核态下，如果分配了一个较大的局部数组，内核栈会溢出（编译没问题）。一旦程序中访问到了溢出的部分，就会出现page fault，也就是访问到了上节说的guard page。</p><p>而xv6内核是没有内存分配器的，所以内核需要分配空间都是直接分一个物理页（很自然的直接映射）然后使用，要想比较精细的使用&amp;连续访问内存，就得自己写一个内存分配器。</p><h3 id="2-2-1-物理内存分配"><a href="#2-2-1-物理内存分配" class="headerlink" title="2.2.1 物理内存分配"></a>2.2.1 物理内存分配</h3><p>物理内存用空闲链表组织管理，每个节点为PGSIZE大小，可以看到next信息是存储在每个页内的。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">kalloc</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">kfree</span><span class="params">(<span class="type">void</span> *pa)</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">run</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">run</span> *<span class="title">freelist</span>;</span></span><br><span class="line">&#125; kmem;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">kalloc</span><span class="params">(<span class="type">void</span>)</span>; <span class="comment">// 取个链表节点返回</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">kfree</span><span class="params">(<span class="type">void</span> *pa)</span>; <span class="comment">// 释放内存添加到链表</span></span><br></pre></td></tr></table></figure><p>需要申请物理内存或者释放物理内存调用kalloc和kfree即可，这里的分配和释放都是以页为单位的。</p><h3 id="2-2-2-添加映射"><a href="#2-2-2-添加映射" class="headerlink" title="2.2.2 添加映射"></a>2.2.2 添加映射</h3><p>在页表内添加映射函数做的工作如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> uint64 *<span class="type">pagetable_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">mappages</span><span class="params">(<span class="type">pagetable_t</span> pagetable, uint64 va, uint64 size, uint64 pa, <span class="type">int</span> perm)</span></span><br><span class="line">&#123;</span><br><span class="line">  uint64 a, last;</span><br><span class="line">  <span class="type">pte_t</span> *pte;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">    panic(<span class="string">&quot;mappages: size&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  a = PGROUNDDOWN(va); <span class="comment">// 虚拟内存的对齐</span></span><br><span class="line">  last = PGROUNDDOWN(va + size - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">for</span>(;;)&#123;</span><br><span class="line">    <span class="keyword">if</span>((pte = walk(pagetable, a, <span class="number">1</span>)) == <span class="number">0</span>) <span class="comment">// 页表中找到pte</span></span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*pte &amp; PTE_V)</span><br><span class="line">      panic(<span class="string">&quot;mappages: remap&quot;</span>);</span><br><span class="line">    *pte = PA2PTE(pa) | perm | PTE_V; <span class="comment">// 物理地址写入pte，设置访问位</span></span><br><span class="line">    <span class="keyword">if</span>(a == last)</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    a += PGSIZE;</span><br><span class="line">    pa += PGSIZE;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的pagetable实际上就是一片物理内存，walk函数通过一些位操作就可以得到虚拟地址对应的pte。</p><p>得到pte之后就可以将物理内存的信息写入pte中，同时pte设置我们想要的访问位，这样就完成了虚拟地址到物理地址的映射。</p><p>所以如果我们要申请内存，步骤是kalloc申请物理内存，随后确定对应的虚拟地址在哪，然后调用mappages映射并存入页表即可。</p><h3 id="2-2-2-内核地址映射"><a href="#2-2-2-内核地址映射" class="headerlink" title="2.2.2 内核地址映射"></a>2.2.2 内核地址映射</h3><p>看一下内核初始化时如何创建页表并建立映射的：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">pagetable_t</span></span><br><span class="line"><span class="title function_">kvmmake</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">pagetable_t</span> kpgtbl;</span><br><span class="line"></span><br><span class="line">  kpgtbl = (<span class="type">pagetable_t</span>) kalloc();</span><br><span class="line">  <span class="built_in">memset</span>(kpgtbl, <span class="number">0</span>, PGSIZE);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// map the trampoline for trap entry/exit to</span></span><br><span class="line">  <span class="comment">// the highest virtual address in the kernel.</span></span><br><span class="line">  kvmmap(kpgtbl, TRAMPOLINE, (uint64)trampoline, PGSIZE, PTE_R | PTE_X);</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  <span class="comment">// allocate and map a kernel stack for each process.</span></span><br><span class="line">  proc_mapstacks(kpgtbl);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> kpgtbl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>首先申请一片物理空间作为内核页表</li><li>对特定的地址空间进行映射，比如trampoline</li><li>对内核栈进行初始化和映射</li></ul><p>proc_mapstacks内进行了内核栈的初始化：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> KSTACK(p) (TRAMPOLINE - (p)*2*PGSIZE - 3*PGSIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">proc_mapstacks</span><span class="params">(<span class="type">pagetable_t</span> kpgtbl)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    <span class="type">char</span> *pa = kalloc();</span><br><span class="line">    <span class="keyword">if</span>(pa == <span class="number">0</span>)</span><br><span class="line">      panic(<span class="string">&quot;kalloc&quot;</span>);</span><br><span class="line">    uint64 va = KSTACK((<span class="type">int</span>) (p - proc));</span><br><span class="line">    kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之前说过，xv6的PCB是一个静态数组proc，这里的内核栈直接为所有的PCB分配了内核栈，注意到宏KSTACK，地址之间的间隔就是上节所说的guard page。</p><h3 id="2-2-3-开启paging"><a href="#2-2-3-开启paging" class="headerlink" title="2.2.3 开启paging"></a>2.2.3 开启paging</h3><p>上面的一系列操作都是没有页表的情况下完成的，也就是上面的内存操作都是物理地址。所以现在需要开启paging，把内核页表地址写入$satp寄存器即可，接下来的操作就都是虚拟地址了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// and enable paging.</span></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">kvminithart</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// wait for any previous writes to the page table memory to finish.</span></span><br><span class="line">  sfence_vma();</span><br><span class="line"></span><br><span class="line">  w_satp(MAKE_SATP(kernel_pagetable));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// flush stale entries from the TLB.</span></span><br><span class="line">  sfence_vma();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-用户进程与虚拟内存"><a href="#3-用户进程与虚拟内存" class="headerlink" title="3. 用户进程与虚拟内存"></a>3. 用户进程与虚拟内存</h1><h2 id="3-1-用户空间内存映射"><a href="#3-1-用户空间内存映射" class="headerlink" title="3.1 用户空间内存映射"></a>3.1 用户空间内存映射</h2><p><img src="/2025/01/15/6-s081-syscall/w/umem.png"></p><p>相比于内核内存管理，用户进程的内存管理要复杂一点，复杂点主要在于：</p><ul><li>所有进程都共享一个内核空间，即共用一张内核页表；但是每个进程都有自己的用户空间，所以每个进程都有单独的页表。</li><li>用户进程可以创建用户进程，用户进程也可以exec新的程序，这期间要对用户态页表进行正确的操作。</li><li>每个进程拥有独立的地址空间和映射关系，可以在这之上实现cow、lazy allocation等提升性能的技术，这需要对用户页表和page fault异常进行恰当的处理。</li></ul><h2 id="3-2-PCB"><a href="#3-2-PCB" class="headerlink" title="3.2 PCB"></a>3.2 PCB</h2><p>了解了xv6的内存管理后，就可以看看PCB到底有哪些内容了，见中文注释：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">proc</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">spinlock</span> <span class="title">lock</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// p-&gt;lock must be held when using these:</span></span><br><span class="line">  <span class="class"><span class="keyword">enum</span> <span class="title">procstate</span> <span class="title">state</span>;</span>        <span class="comment">// 进程状态</span></span><br><span class="line">  <span class="type">void</span> *chan;                  <span class="comment">// sleep锁相关</span></span><br><span class="line">  <span class="type">int</span> killed;                  <span class="comment">// 被标记为杀死的进程</span></span><br><span class="line">  <span class="type">int</span> xstate;                  <span class="comment">// 进程退出时的状态</span></span><br><span class="line">  <span class="type">int</span> pid;                     <span class="comment">// 进程id</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// wait_lock must be held when using this:</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">parent</span>;</span>         <span class="comment">// 父进程PCB指针</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// these are private to the process, so p-&gt;lock need not be held.</span></span><br><span class="line">  uint64 kstack;               <span class="comment">// 内核栈虚拟地址</span></span><br><span class="line">  uint64 sz;                   <span class="comment">// 分配给用户空间的物理内存大小</span></span><br><span class="line">  <span class="type">pagetable_t</span> pagetable;       <span class="comment">// 用户态页表</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">trapframe</span> *<span class="title">trapframe</span>;</span> <span class="comment">// trapframe</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">context</span> <span class="title">context</span>;</span>      <span class="comment">// 进程调度的上下文相关</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">file</span> *<span class="title">ofile</span>[<span class="title">NOFILE</span>];</span>  <span class="comment">// 进程文件描述父表</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">inode</span> *<span class="title">cwd</span>;</span>           <span class="comment">// 当前目录的inode</span></span><br><span class="line">  <span class="type">char</span> name[<span class="number">16</span>];               <span class="comment">// 进程名称</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>相对于真实世界os，xv6的PCB里仅有一些基本的数据，但是麻雀虽小五脏俱全。这里的PCB包括了trap、内存管理、进程调度、文件系统等内容，后面都会接触到，现在先对内存管理进程分析。</p><h2 id="3-3-PCB的分配"><a href="#3-3-PCB的分配" class="headerlink" title="3.3 PCB的分配"></a>3.3 PCB的分配</h2><ul><li>xv6是一个静态数组来管理所有PCB，所以分配PCB时遍历数组找到一个可用的即可，若无可用则会返回nullptr。</li><li>随后将分配物理页作为进程的trapframe，trapframe之前有提过，在内核态用户态切换时保存寄存器。</li><li>建立一个用户态页表，并把trapframe映射到用户空间，同时trapframe的地址保存在了PCB中，因此内核和用户都能访问到trapframe。</li><li>最后关联一个内核栈地址，设置返回地址即可。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="keyword">struct</span> proc*</span><br><span class="line"><span class="title function_">allocproc</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(p = proc; p &lt; &amp;proc[NPROC]; p++) &#123;</span><br><span class="line">    acquire(&amp;p-&gt;lock);</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;state == UNUSED) &#123;</span><br><span class="line">      <span class="keyword">goto</span> found;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      release(&amp;p-&gt;lock);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">found:</span><br><span class="line">  p-&gt;pid = allocpid();</span><br><span class="line">  p-&gt;state = USED;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Allocate a trapframe page.</span></span><br><span class="line">  <span class="keyword">if</span>((p-&gt;trapframe = (<span class="keyword">struct</span> trapframe *)kalloc()) == <span class="number">0</span>)&#123;</span><br><span class="line">    freeproc(p);</span><br><span class="line">    release(&amp;p-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// An empty user page table.</span></span><br><span class="line">  p-&gt;pagetable = proc_pagetable(p);</span><br><span class="line">  <span class="keyword">if</span>(p-&gt;pagetable == <span class="number">0</span>)&#123;</span><br><span class="line">    freeproc(p);</span><br><span class="line">    release(&amp;p-&gt;lock);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set up new context to start executing at forkret,</span></span><br><span class="line">  <span class="comment">// which returns to user space.</span></span><br><span class="line">  <span class="built_in">memset</span>(&amp;p-&gt;context, <span class="number">0</span>, <span class="keyword">sizeof</span>(p-&gt;context));</span><br><span class="line">  p-&gt;context.ra = (uint64)forkret;</span><br><span class="line">  p-&gt;context.sp = p-&gt;kstack + PGSIZE;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-4-init进程的创建"><a href="#3-4-init进程的创建" class="headerlink" title="3.4 init进程的创建"></a>3.4 init进程的创建</h2><p>父进程创建子进程，子进程将继承用户空间的映射（实际的物理内存是重新拷贝一份），子进程的栈也只要根据父进程的栈增长一部分即可。</p><p>而内核创建init进程，init没有父进程可以继承，所以内核要为它设置相关的数据，包括程序段的映射、程序计数器和用户栈指针的设置等。</p><p>可以看到，init程序段占据了一页映射在了页表中，同时p-&gt;sz也被置为了PGSIZE，标识用户空间已用一页内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">userinit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">  p = allocproc();</span><br><span class="line">  initproc = p;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 程序段映射</span></span><br><span class="line">  uvmfirst(p-&gt;pagetable, initcode, <span class="keyword">sizeof</span>(initcode));</span><br><span class="line">  p-&gt;sz = PGSIZE;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置$pc和$sp</span></span><br><span class="line">  p-&gt;trapframe-&gt;epc = <span class="number">0</span>; </span><br><span class="line">  p-&gt;trapframe-&gt;sp = PGSIZE; </span><br><span class="line"></span><br><span class="line">  safestrcpy(p-&gt;name, <span class="string">&quot;initcode&quot;</span>, <span class="keyword">sizeof</span>(p-&gt;name));</span><br><span class="line">  p-&gt;cwd = namei(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p-&gt;state = RUNNABLE;</span><br><span class="line"></span><br><span class="line">  release(&amp;p-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-fork"><a href="#3-5-fork" class="headerlink" title="3.5 fork"></a>3.5 fork</h2><p>父进程创建子进程时，子进程将完全拷贝用户内存，但是页表中的映射保持不变，也就是说父进程子进程的相同的地址访问的内容相同，但是物理内存上是不同的。</p><p>具体实现上并不复杂，将sz内的页完全拷贝一份，映射到子进程页表中即可，注意映射的虚拟地址要与父进程相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历用户态分配的内存页</span></span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; sz; i += PGSIZE)&#123;</span><br><span class="line">    <span class="keyword">if</span>((pte = walk(old, i, <span class="number">0</span>)) == <span class="number">0</span>)</span><br><span class="line">      panic(<span class="string">&quot;uvmcopy: pte should exist&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((*pte &amp; PTE_V) == <span class="number">0</span>)</span><br><span class="line">      panic(<span class="string">&quot;uvmcopy: page not present&quot;</span>);</span><br><span class="line">    pa = PTE2PA(*pte);</span><br><span class="line">    flags = PTE_FLAGS(*pte);</span><br><span class="line">    <span class="keyword">if</span>((mem = kalloc()) == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">goto</span> err;</span><br><span class="line">    memmove(mem, (<span class="type">char</span>*)pa, PGSIZE);</span><br><span class="line">    <span class="keyword">if</span>(mappages(new, i, PGSIZE, (uint64)mem, flags) != <span class="number">0</span>)&#123;</span><br><span class="line">      kfree(mem);</span><br><span class="line">      <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-page-fault与应用"><a href="#3-6-page-fault与应用" class="headerlink" title="3.6 page fault与应用"></a>3.6 page fault与应用</h2><p>page fault是trap的一种，当用户想要访问一个虚拟地址时，它对应的PTE访问位不满足条件，就会产生一个page fault，例如访问无效地址、读写限制等。</p><p>而os可以利用page fault实现一些很有用的技术：</p><ul><li>cow：后一节会提到，创建子进程时不立即拷贝所有用户内存。</li><li>lazy alloction：用户申请一大片内存空间，内核不立刻分配空间并映射，而是等到用户访问到这些内存产生page fault时才分配映射。</li><li>demand paging：在exec时，xv6是直接把可执行程序段都加载进内存，现实世界中有的程序段可能很大很大，所以只需要映射其中的一部分，等到有需要时再拷贝进内存并映射即可。</li><li>mmap：文件映射到内存，映射方法也可以采用lazy alloction的形式。</li></ul><h1 id="4-lab-pgtbl"><a href="#4-lab-pgtbl" class="headerlink" title="4. lab pgtbl"></a>4. lab pgtbl</h1><h2 id="4-1-speed-syscall"><a href="#4-1-speed-syscall" class="headerlink" title="4.1 speed syscall"></a>4.1 speed syscall</h2><p>说的是可以利用用户空间的内存映射加速一些系统调用，比如现在想要获取当前进程pid，就要进内核态查PCB。但如果我们在创建进程时，将pid信息拷贝到用户空间并映射到特定的位置，这样在查pid时只要在用户空间完成即可，避免了切换内核态的开销。</p><p>实现方法是在fork时分配物理内存，用户空间添加映射即可，代码略。</p><h2 id="4-2-Print-a-page-table"><a href="#4-2-Print-a-page-table" class="headerlink" title="4.2 Print a page table"></a>4.2 Print a page table</h2><p>打印用户页表，根据PTE的定义三层遍历即可。</p><h2 id="4-3-pgaccess"><a href="#4-3-pgaccess" class="headerlink" title="4.3 pgaccess"></a>4.3 pgaccess</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">pgaccess</span><span class="params">(<span class="type">void</span> *base, <span class="type">int</span> len, <span class="type">void</span> *mask)</span>;</span><br></pre></td></tr></table></figure><p>pgaccess实现的是打印进程用到了哪些物理页，一些GC程序可能会利用到这个来处理进行垃圾回收。</p><p>实现方法还是遍历页表，有一些不同的地方在于，pgaccess将页使用信息按位写在了mask里，但是pgaccess是用户发起的系统调用，也就是说mask是用户空间的内存，所以这里就要注意内核需要找到mask对应的物理地址再写入数据才能真正地把数据传递到用户空间。</p><h1 id="5-Copy-on-Write"><a href="#5-Copy-on-Write" class="headerlink" title="5. Copy-on-Write"></a>5. Copy-on-Write</h1><h2 id="5-1-原理"><a href="#5-1-原理" class="headerlink" title="5.1 原理"></a>5.1 原理</h2><p>xv6对fork的实现是，创建子进程时将父进程空间内的物理内存完全拷贝一份，并一一在子进程空间建立映射，但是这种做法非常低效。例如一个经典的操作是fork + exec，如果fork将内存全部拷贝完，随后执行exec时，用户空间将会被完全重置并建立新的映射，这种情况下是非常浪费CPU的。</p><p>故我们可以在fork时不立刻拷贝用户内存，而是对这些内存进行一些额外的标记。</p><ul><li>如果页是只读的，那么不拷贝完全没有影响，父子进程都读同一段物理内存即可。</li><li>如果页是可写的，那么在fork时就需要在PTE中将它改为不可写，同时添加上COW标志。随后如果进程想写COW页，那么此时可以将这一页真正地拷贝：分配物理内存并在页表中建立映射，随后该进程写这一片新拷贝的内存即可。</li></ul><h2 id="5-2-实现方法"><a href="#5-2-实现方法" class="headerlink" title="5.2 实现方法"></a>5.2 实现方法</h2><h3 id="5-2-1-fork"><a href="#5-2-1-fork" class="headerlink" title="5.2.1 fork"></a>5.2.1 fork</h3><p>fork时只需要改变用户内存的拷贝逻辑即可，将用户页的PTE移除写标识，添加PTE_C的标志，用于后续的page fault时判断。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sz; i += PGSIZE) &#123;</span><br><span class="line">  <span class="keyword">if</span> ((pte = walk(old, i, <span class="number">0</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">    panic(<span class="string">&quot;uvmcopy: pte should exist&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>((*pte &amp; PTE_V) == <span class="number">0</span>) &#123;</span><br><span class="line">    panic(<span class="string">&quot;uvmcopy: page not present&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>((*pte &amp; PTE_W) != <span class="number">0</span>) &#123;</span><br><span class="line">    *pte = (*pte &amp; (~PTE_W)) | PTE_C;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// if PTE_C or PTE_R, copy</span></span><br><span class="line">  pa = PTE2PA(*pte);</span><br><span class="line">  <span class="keyword">if</span> (mappages(new, i, PGSIZE, pa, PTE_FLAGS(*pte)) != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> err;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 物理页的引用计数修改</span></span><br><span class="line">  princr(pa);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑这么一个场景：父进程创建了两个子进程，他们都共享一个可写页A。第一个子进程写A，执行了写拷贝；第二个子进程写A，又执行了写拷贝；此时父进程再要写A，就可以直接在当前的物理地址写就可以了，因为此时没有进程跟他共享A了。</p><p>为了实现这个逻辑，就需要添加一个数据结构，对所有物理页的引用次数进行统计，当COW页的引用次数为1时，就不需要再进行写时复制了，直接写即可。</p><h3 id="5-2-2-trap"><a href="#5-2-2-trap" class="headerlink" title="5.2.2 trap"></a>5.2.2 trap</h3><p>fork里修改的是对内存拷贝的处理，而COW的写时复制需要靠page fault来实现，即处理对应的trap，包括以下几步：</p><ul><li>在trap处理中捕获写page fault，并得到触发page fault的虚拟地址。</li><li>在用户进程页表中检查地址对应的PTE，如果有COW位，则进行写时复制的判断。</li><li>判断当前物理页的引用次数，大于1才进行复制，否则直接修改PTE的写位即可</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (r_scause() == <span class="number">15</span>) &#123;</span><br><span class="line">  <span class="comment">// stval是触发的虚拟地址</span></span><br><span class="line">  uint64 vm = r_stval();</span><br><span class="line">  <span class="keyword">if</span> (vm &gt;= MAXVA) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">pte_t</span>* pte;</span><br><span class="line">  <span class="keyword">if</span> ((pte = walk(p-&gt;pagetable, vm, <span class="number">0</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ((*pte &amp; PTE_C) == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 物理地址</span></span><br><span class="line">  uint64 pa = PTE2PA(*pte);</span><br><span class="line">  <span class="comment">// 引用次数进行判断</span></span><br><span class="line">  <span class="keyword">if</span> (prget(pa) == <span class="number">1</span>) &#123;</span><br><span class="line">    *pte = (*pte &amp; (~PTE_C)) | PTE_W;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (prget(pa) &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// 开始实际的页拷贝</span></span><br><span class="line">    uint perm = (PTE_FLAGS(*pte) &amp; (~PTE_C)) | PTE_W;</span><br><span class="line">    <span class="type">char</span> *mem;</span><br><span class="line">    <span class="keyword">if</span> ((mem = kalloc()) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    memmove(mem, (<span class="type">char</span> *)pa, PGSIZE);</span><br><span class="line">    uvmunmap(p-&gt;pagetable, PGROUNDDOWN(vm), <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(mappages(p-&gt;pagetable, PGROUNDDOWN(vm), PGSIZE, (uint64)mem, perm) != <span class="number">0</span>) &#123;</span><br><span class="line">      kfree(mem);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      panic(<span class="string">&quot;paref cnt &lt; 0&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>对比真实世界的os，xv6的内存管理要简化了很多很多：</p><ul><li>xv6在内核态是，虚拟地址和物理地址是直接映射的，这为我们实现功能简化了很多操作。</li><li>xv6的物理页并没有置换功能，现实中的os是实现了物理页置换功能的。</li><li>xv6的内核没有malloc，所以申请栈外内存都是很粗糙地直接取一个物理页。</li></ul><p>虽然有所简化，但是收获还是很多的～</p>]]></content>
    
    
    <summary type="html">本文梳理了xv6的虚拟内存的实现，结合进程信息进行了分析，最后介绍了如何在此之上实现Copy-on-Write。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>6.s081 traps</title>
    <link href="http://example.com/2025/01/19/6-s081-traps/"/>
    <id>http://example.com/2025/01/19/6-s081-traps/</id>
    <published>2025-01-18T16:47:24.000Z</published>
    <updated>2025-01-22T16:46:48.812Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-关于trap"><a href="#1-关于trap" class="headerlink" title="1. 关于trap"></a>1. 关于trap</h1><p>xv6中的trap分为三种：系统调用、程序异常、硬件中断。<br>其中系统调用trap在上一篇已经详细介绍过了：<a href="https://zzxy1999.github.io/2025/01/15/6-s081-syscall/">https://zzxy1999.github.io/2025/01/15/6-s081-syscall/</a> ，其他的trap处理也是大同小异（硬件的具体处理有所不同），所以直接进入lab。</p><h1 id="2-lab-traps"><a href="#2-lab-traps" class="headerlink" title="2. lab traps"></a>2. lab traps</h1><h2 id="2-1-RISC-V-assembly"><a href="#2-1-RISC-V-assembly" class="headerlink" title="2.1 RISC-V assembly"></a>2.1 RISC-V assembly</h2><p>读汇编答问题，略。</p><h2 id="2-2-Backtrace"><a href="#2-2-Backtrace" class="headerlink" title="2.2 Backtrace"></a>2.2 Backtrace</h2><p>要求在内核添加一个backtrace函数，同时添加在panic函数中，这样每次panic都会由函数调用信息。</p><h3 id="2-2-1-函数调用"><a href="#2-2-1-函数调用" class="headerlink" title="2.2.1 函数调用"></a>2.2.1 函数调用</h3><p>函数调用栈中保存着返回地址，而$fp寄存器保存着当前调用栈的起始位置，所以可以很容易得到当前函数的返回地址。但是backtrace是需要递归地打印调用关系的，所以还需要知道当前函数的调用者的栈信息。所幸的是当前栈的栈底就连接着调用者的栈顶，而调用者的fp寄存器就保存在它的栈底的特定位置，所以我们可以得到调用者的栈信息并打印返回地址信息。按照这个思路，就可以递归地打印出函数的调用关系，直到用户空间栈边界。<br><img src="/2025/01/19/6-s081-traps/stack.jpg"><br>代码非常简短，递归调用即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">backtrace</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;backtarce:\n&quot;</span>);</span><br><span class="line">  uint64 pre = r_fp();</span><br><span class="line">  uint64 pgd = PGROUNDDOWN(pre);</span><br><span class="line">  <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">    uint64 ret_addr = *(((uint64*)pre) - <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, ret_addr);</span><br><span class="line">    pre = *(((uint64*)pre) - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (PGROUNDDOWN(pre) != pgd) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面开始介绍比较有难度的optional challenge。</p><h3 id="2-2-2-addr2line"><a href="#2-2-2-addr2line" class="headerlink" title="2.2.2 addr2line"></a>2.2.2 addr2line</h3><p>值得注意的是上面的backtrace打印的是指令地址，而平时用的backtrace打印的都是程序行数这种信息，所以我们还需要把指令地址与程序行数联系起来。<br>一种非常简单的方法，就是用addr2line程序，输入指令地址就可以得到程序行数了；但是这里作为一个完整的backtrace，最好还是自己做一个addr2line在backtrace中才好。</p><h3 id="2-3-3-elf"><a href="#2-3-3-elf" class="headerlink" title="2.3.3 elf"></a>2.3.3 elf</h3><p>首先梳理一下目标，现在已知指令地址，需要知道对应的代码行数，这些debug信息其实在可执行文件中都有保存，所以需要做的就是对elf进行解析。<br>先贴个链接，里面说明了elf文件的结构定义（看起来比较费劲）：<br><a href="https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html">https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html</a><br>手画个elf结构图：<br><img src="/2025/01/19/6-s081-traps/elf.jpg"><br>我们想要的地址信息就都在.debug_line里。</p><h3 id="2-3-4-elf头"><a href="#2-3-4-elf头" class="headerlink" title="2.3.4 elf头"></a>2.3.4 elf头</h3><p>下面列出了几个elf头比较重要的信息，我们需要的是根据头信息得到几个section信息。<br>举个例子，elf文件的shoff处就是第一个section头的位置，我们只要按section头的结构读取这里的数据，就可以得到第一个section头；如果需要第二个section头，只需要读文件偏移shoff + sizeof(section header)即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// File header</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">elfhdr</span> &#123;</span></span><br><span class="line">  uint magic;  <span class="comment">// must equal ELF_MAGIC</span></span><br><span class="line">  uchar elf[<span class="number">12</span>];</span><br><span class="line">  ushort type;</span><br><span class="line">  ushort machine;</span><br><span class="line">  uint version;</span><br><span class="line">  uint64 entry;</span><br><span class="line">  uint64 phoff;</span><br><span class="line">  uint64 shoff; <span class="comment">// section头所在位置</span></span><br><span class="line">  uint flags;</span><br><span class="line">  ushort ehsize;</span><br><span class="line">  ushort phentsize;</span><br><span class="line">  ushort phnum;</span><br><span class="line">  ushort shentsize;</span><br><span class="line">  ushort shnum; <span class="comment">// section的数目</span></span><br><span class="line">  ushort shstrndx; <span class="comment">// section名称表所在位置</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="2-3-5-section头"><a href="#2-3-5-section头" class="headerlink" title="2.3.5 section头"></a>2.3.5 section头</h3><p>section头里的信息如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  uint name; <span class="comment">// section的名称</span></span><br><span class="line">  uint type; <span class="comment">// section类型</span></span><br><span class="line">  uint64 flags;</span><br><span class="line">  uint64 addr;</span><br><span class="line">  uint64 off; <span class="comment">// section的位置</span></span><br><span class="line">  uint64 size; <span class="comment">// section的大小</span></span><br><span class="line">  uint link;</span><br><span class="line">  uint info;</span><br><span class="line">  uint64 addralign;</span><br><span class="line">  uint64 entsize;</span><br><span class="line">&#125; shdr;</span><br></pre></td></tr></table></figure><p>综合上面的信息，尝试打印一个elf文件的elf头和各个section头的信息<br><img src="/2025/01/19/6-s081-traps/elf.png"><br>可以看到section头的name都是数字，其实他们标识的是自己的名字在名称表中的位置，名称表由若干个字符串拼接而成。<br>名称表也是一个section，相应的它也有section头，也就是说上面的一系列section头中有我们现在需要的名称表，接下来的任务是找出谁是名称表。<br>名称表的type是3,但是可以看到有两个section头的type是3，但是这里有两个3。回顾一下elf头，里面的shstrndx为16，它其实就指出了section名称表的位置，也就是图中最后一个条目。</p><h3 id="2-3-6-shstrtab"><a href="#2-3-6-shstrtab" class="headerlink" title="2.3.6 shstrtab"></a>2.3.6 shstrtab</h3><p>根据最后一个section头的信息，可以打印出section内的内容：<br><img src="/2025/01/19/6-s081-traps/table.png"><br>配合着section头内的name再打印一边section头信息可以看到非常清晰了：<br><img src="/2025/01/19/6-s081-traps/elf-name.png"></p><h3 id="2-3-7-debug-line"><a href="#2-3-7-debug-line" class="headerlink" title="2.3.7 .debug_line"></a>2.3.7 .debug_line</h3><p>经过一步步处理，我们已经知道debug_line在哪个段了，接下来需要对debug_line内的内容进行处理。elf中的debug_line并非简单的地址-行号的映射，它实际上是一个按字节处理的状态流。想要读取其中的信息，需要构建一个简易的状态机，保存行号、地址、文件名等信息，逐一读取debug_line中的字节，来驱使状态机得到一个个地址-行号的映射，得到了所有的映射后，将我们backtrace得到的地址利用二分查找找到对应行号即可。</p><h3 id="2-3-8-exec与elf"><a href="#2-3-8-exec与elf" class="headerlink" title="2.3.8 exec与elf"></a>2.3.8 exec与elf</h3><p>既然elf都看到这了，就顺便看一下跟exec相关的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, off=elf.phoff; i&lt;elf.phnum; i++, off+=<span class="keyword">sizeof</span>(ph))&#123;</span><br><span class="line">  <span class="keyword">if</span>(readi(ip, <span class="number">0</span>, (uint64)&amp;ph, off, <span class="keyword">sizeof</span>(ph)) != <span class="keyword">sizeof</span>(ph))</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  <span class="keyword">if</span>(ph.type != ELF_PROG_LOAD)</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">  <span class="keyword">if</span>(ph.memsz &lt; ph.filesz)</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  <span class="keyword">if</span>(ph.vaddr + ph.memsz &lt; ph.vaddr)</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  <span class="keyword">if</span>(ph.vaddr % PGSIZE != <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  uint64 sz1;</span><br><span class="line">  <span class="keyword">if</span>((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  sz = sz1;</span><br><span class="line">  <span class="keyword">if</span>(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">goto</span> bad;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>学习了elf文件和各个section的结构后，这段代码的含义就清晰很多了：exec从elf特定的偏移位置读取文件，读取的数据就是可执行的指令流，把这些指令流拷贝到用户空间，最后把用户的$pc指向指令流的开始处即可。</p><h2 id="2-3-Alarm"><a href="#2-3-Alarm" class="headerlink" title="2.3 Alarm"></a>2.3 Alarm</h2><p>这部分要实现的是一对Alarm系统调用，实现的功能是定时器触发一定次数时执行之前设置好的函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">sigalarm</span><span class="params">(<span class="type">int</span> ticks, <span class="type">void</span> (*handler)())</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">sigreturn</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">handler</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  count = count + <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;alarm!\n&quot;</span>);</span><br><span class="line">  sigreturn();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">test0</span><span class="params">()</span></span><br><span class="line">&#123; </span><br><span class="line">  sigalarm(<span class="number">2</span>, handler);</span><br><span class="line">  <span class="comment">// wait</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-1-定时器的处理"><a href="#2-3-1-定时器的处理" class="headerlink" title="2.3.1 定时器的处理"></a>2.3.1 定时器的处理</h3><p>定时器的处理比较直观：tick也是一种trap，所以在处理trap时可以以进程维度对tick进行计数，当次数满足用户要求是，调用用户传进的函数即可。</p><h3 id="2-3-2-控制流的传递"><a href="#2-3-2-控制流的传递" class="headerlink" title="2.3.2 控制流的传递"></a>2.3.2 控制流的传递</h3><p>这里要考虑一下的是控制流该如何传递：</p><ul><li><ol><li>用户态下tick触发中断</li></ol></li><li><ol start="2"><li>内核态的trap处理，如果tick次数达到，进入handler函数</li></ol></li><li><ol start="3"><li>handler函数调用sigreturn进入内核</li></ol></li><li><ol start="4"><li>sigreturn返回到1处被中断的位置</li></ol></li></ul><p>在syscall里提过，用户态内核态的切换，寄存器保存在了trapframe中，所以我们可以通过修改trapframe中保存的pc来改变控制流：</p><ul><li>1–&gt;2: 把trapframe中的pc改成handler的地址，再返回；需要注意的handler在用户态，进入handler原有的trapframe会被破坏，所以需要在PCB内保存一下原始的trapframe。</li><li>2–&gt;3: handler的最后是sigreturn，再次进入内核。</li><li>3–&gt;4: 在sigreturn内，把trapframe替换为之前保存的trapframe，这样再返回用户态就能顺利返回到1的中断处了。</li></ul><p><img src="/2025/01/19/6-s081-traps/alarm.png"></p><h1 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h1><p>两个lab都很有意思，一个是理解了backtrace的原理，顺便学习了elf文件的内部结构；另一个学习到了如何利用改变寄存器控制程序流的走向。</p>]]></content>
    
    
    <summary type="html">本文主要介绍了如何实现backtrace与alarm，同时包括了对elf文件格式的部分梳理。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>6.s081 syscall</title>
    <link href="http://example.com/2025/01/15/6-s081-syscall/"/>
    <id>http://example.com/2025/01/15/6-s081-syscall/</id>
    <published>2025-01-15T01:58:36.000Z</published>
    <updated>2025-01-22T15:01:13.630Z</updated>
    
    <content type="html"><![CDATA[<p><strong><a href=""></a></strong></p><h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p>6.s081是MIT开设的os课，前段时间把所有lab都写完了，最近有空便重新阅读一下xv6的源码，结合lab记录一下。<br>课程链接在这<a href="https://pdos.csail.mit.edu/6.828/2022/">https://pdos.csail.mit.edu/6.828/2022/</a><br>个人的lab实现在这<a href="https://github.com/Zzxy1999/6.s081">https://github.com/Zzxy1999/6.s081</a></p><h1 id="1-xv6的启动"><a href="#1-xv6的启动" class="headerlink" title="1. xv6的启动"></a>1. xv6的启动</h1><h2 id="1-1-从开机到加载操作系统"><a href="#1-1-从开机到加载操作系统" class="headerlink" title="1.1 从开机到加载操作系统"></a>1.1 从开机到加载操作系统</h2><p>电源打开后，计算机会从ROM中加载一段叫boot loader的程序到内存，boot loader的主要作用是把内核文件（elf）加载进内存。内核大多是C代码，而C代码的执行需要有栈，所以内核的第一段程序用汇编写成即entry.s，它的作用主要是设置一段内存作为内核栈，移动$sp到栈顶，再把控制交给内核的C代码。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">_entry:</span><br><span class="line"># set up a stack for C.</span><br><span class="line"># stack0 is declared in start.c,</span><br><span class="line"># with a 4096-byte stack per CPU.</span><br><span class="line"># sp = stack0 + (hartid * 4096)</span><br><span class="line">la sp, stack0</span><br><span class="line">li a0, 1024*4</span><br><span class="line">csrr a1, mhartid</span><br><span class="line">addi a1, a1, 1</span><br><span class="line">mul a0, a0, a1</span><br><span class="line">add sp, sp, a0</span><br><span class="line"># jump to start() in start.c</span><br><span class="line">call start</span><br></pre></td></tr></table></figure><h2 id="1-2-start"><a href="#1-2-start" class="headerlink" title="1.2 start"></a>1.2 start</h2><p>现在有了C代码的栈空间，可以执行内核的C代码了，第一段C代码start位于start.c中，start执行了一些机器级的初始化，例如时钟中断初始化等，随后就要进入操作系统的main函数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">/ entry.S jumps here in machine mode on stack0.</span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">start</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">...</span><br><span class="line"> <span class="comment">// set M Exception Program Counter to main, for mret.</span></span><br><span class="line"> <span class="comment">// requires gcc -mcmodel=medany</span></span><br><span class="line"> w_mepc((uint64)main);</span><br><span class="line"> <span class="comment">// switch to supervisor mode and jump to main().</span></span><br><span class="line"> <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;mret&quot;</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>汇编代码里可以轻易的jump到想去的函数位置，而C程序中函数返回将返回到它的调用者处。而start想去的是main函数，所以就需要对当前的返回地址做修改，将它改成main的起始地址，随后再进行ret，就可以顺利地跳转到main函数位置了。</p><h2 id="1-3-main"><a href="#1-3-main" class="headerlink" title="1.3 main"></a>1.3 main</h2><p>操作系统的main函数包含很多os相关的初始化函数，包括了设备、内核页表、trap、fs等相关数据结构。初始化结束后就要开始生成第一个用户进程，也就是常说的init进程了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">if</span>(cpuid() == <span class="number">0</span>)&#123;</span><br><span class="line">    consoleinit();</span><br><span class="line">    printfinit();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;xv6 kernel is booting\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    kinit();         <span class="comment">// physical page allocator</span></span><br><span class="line">    kvminit();       <span class="comment">// create kernel page table</span></span><br><span class="line">    kvminithart();   <span class="comment">// turn on paging</span></span><br><span class="line">    procinit();      <span class="comment">// process table</span></span><br><span class="line">    trapinit();      <span class="comment">// trap vectors</span></span><br><span class="line">    trapinithart();  <span class="comment">// install kernel trap vector</span></span><br><span class="line">    plicinit();      <span class="comment">// set up interrupt controller</span></span><br><span class="line">    plicinithart();  <span class="comment">// ask PLIC for device interrupts</span></span><br><span class="line">    binit();         <span class="comment">// buffer cache</span></span><br><span class="line">    iinit();         <span class="comment">// inode table</span></span><br><span class="line">    fileinit();      <span class="comment">// file table</span></span><br><span class="line">    virtio_disk_init(); <span class="comment">// emulated hard disk</span></span><br><span class="line">    userinit();      <span class="comment">// first user process</span></span><br><span class="line">    __sync_synchronize();</span><br><span class="line">    started = <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(started == <span class="number">0</span>)</span><br><span class="line">      ;</span><br><span class="line">    __sync_synchronize();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hart %d starting\n&quot;</span>, cpuid());</span><br><span class="line">    kvminithart();    <span class="comment">// turn on paging</span></span><br><span class="line">    trapinithart();   <span class="comment">// install kernel trap vector</span></span><br><span class="line">    plicinithart();   <span class="comment">// ask PLIC for device interrupts</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  scheduler();        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-userinit"><a href="#1-4-userinit" class="headerlink" title="1.4 userinit"></a>1.4 userinit</h2><p>init和内核程序不同，它运行在用户态，它有着用户进程页表、父子进程、进程状态等多种属性，userinit要做的就是创建这样一个进程，同时对它进行恰当的初始化，这里的初始化可以分为几个部分：</p><ul><li>进程控制块：xv6的PCB是一个静态数组，内核直接调用allocproc获取一个PCB作为init进程的PCB。</li><li>页表：由于init进程没有真正意义上的父进程，所以页表就没法继承，就得内核帮它构建映射。uvmfirst的作用就是把init这个用户程序映射到这个进程的页表中，位置就在用户空间0地址处。</li><li>栈：用户空间得有自己的栈，而栈的位置设置在了PGSIZE处，也就是init用户程序的下一页的位置。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">userinit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span>;</span></span><br><span class="line"></span><br><span class="line">  p = allocproc();</span><br><span class="line">  initproc = p;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// allocate one user page and copy initcode&#x27;s instructions</span></span><br><span class="line">  <span class="comment">// and data into it.</span></span><br><span class="line">  uvmfirst(p-&gt;pagetable, initcode, <span class="keyword">sizeof</span>(initcode));</span><br><span class="line">  p-&gt;sz = PGSIZE;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// prepare for the very first &quot;return&quot; from kernel to user.</span></span><br><span class="line">  p-&gt;trapframe-&gt;epc = <span class="number">0</span>;      <span class="comment">// user program counter</span></span><br><span class="line">  p-&gt;trapframe-&gt;sp = PGSIZE;  <span class="comment">// user stack pointer</span></span><br><span class="line"></span><br><span class="line">  safestrcpy(p-&gt;name, <span class="string">&quot;initcode&quot;</span>, <span class="keyword">sizeof</span>(p-&gt;name));</span><br><span class="line">  p-&gt;cwd = namei(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"></span><br><span class="line">  p-&gt;state = RUNNABLE;</span><br><span class="line"></span><br><span class="line">  release(&amp;p-&gt;lock);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一些额外的讨论：</p><ul><li>PCB是一个静态数组是因为内核没有动态内存分配模块（如果内核要用内存，要不在内核栈分配，要不就是直接要一个物理页来进行操作），所以只能用静态数组，系统内的进程数也就有了限制。</li><li>用户栈直接被映射在了PGSIZE处，随后所有的进程栈空间都在这个基础上，遵循C语言函数调用栈规则即可。</li><li>可以看到这里的$pc获得$sp都不是直接设置寄存器，而是设置在了trapframe中，这个trapframe相当于保存的被调用者寄存器，当userinit返回时，$pc将会被正确地置于init程序处。</li></ul><h2 id="1-5-init"><a href="#1-5-init" class="headerlink" title="1.5 init"></a>1.5 init</h2><p>init就是运行在用户态的用户程序，大概执行的就是打开console&amp;重定向，创建第二个子进程让它来执行shell程序，之后再进入永不停止的for循环即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// open console &amp; dup</span></span><br><span class="line">  <span class="comment">// fork and exec shell</span></span><br><span class="line">  <span class="comment">// while</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，xv6完成了电源启动到init进程创建的全过程。</p><h1 id="2-lab-util"><a href="#2-lab-util" class="headerlink" title="2. lab util"></a>2. lab util</h1><p>第一个lab用系统调用在xv6内写几个用户程序，例如find xargs这种，不再赘述。</p><h1 id="3-关于系统调用"><a href="#3-关于系统调用" class="headerlink" title="3. 关于系统调用"></a>3. 关于系统调用</h1><p>以os的设计者视角来看，肯定不希望用户直接对内核数据、设备硬件等资源直接进行操作，但是用户程序往往需要用到这些资源（比如简单的printf）。所以os就提供了一系列接口，帮用户来实现这些内核级的操作，这些接口就是系统调用。</p><h2 id="3-1-系统调用的整体流程"><a href="#3-1-系统调用的整体流程" class="headerlink" title="3.1 系统调用的整体流程"></a>3.1 系统调用的整体流程</h2><p>xv6中的系统调用流程大致为：</p><ul><li>用户发起系统调用</li><li>控制转移到uservec（trampoline.s）为进入内核做准备</li><li>进入内核的usertrap函数，判断是否为系统调用</li><li>根据系统调用表查找相应的处理函数</li><li>处理函数读取参数并完成相应的功能</li><li>完成要求后做一些退出准备，随后返回用户空间</li></ul><h2 id="3-2-trap相关的寄存器"><a href="#3-2-trap相关的寄存器" class="headerlink" title="3.2 trap相关的寄存器"></a>3.2 trap相关的寄存器</h2><p>系统调用是一种用户级trap，riscv中有很多寄存器跟trap的处理关系密切，下面列几个比较重要。</p><ul><li>stvec:    里面记录着处理trap的入口地址</li><li>sepc:     进入内核后，返回到用户空间的地址</li><li>scause:   trap原因，编号表示</li><li>sstatus:  trap由内核引发还是用户引发</li></ul><p>下面用gdb简单的验证一下stvec寄存器的地址在哪。<br><img src="/2025/01/15/6-s081-syscall/stvec.png"></p><ul><li>gdb停在了内核空间，打印stvec寄存器的值，为0x80005120。</li><li>看看0x80005120到底是哪，发现是kernelvec的地址，在kernelvec.S中，是处理内核trap的位置。</li></ul><p>原因是stvec会在用户空间和内核空间变化，在内核空间看到的stvec自然是处理内核trap的起始位置。下面执行一个用户程序，进入用户空间看看stvec寄存器的值。<br><img src="/2025/01/15/6-s081-syscall/stvec1.png"></p><ul><li>简单执行一个ls程序，并在执行系统调用open前，打印stvec的值0x3ffffff000。</li><li>断点到0x3ffffff000处，发现这里是trampoline.S的地方，符合预期。</li></ul><p><img src="/2025/01/15/6-s081-syscall/trampoline.S.png"></p><h2 id="3-3-trapframe"><a href="#3-3-trapframe" class="headerlink" title="3.3 trapframe"></a>3.3 trapframe</h2><p>从用户空间切换到内核空间，有很多寄存器都要保存下来，保存的位置在用户地址TRAPFRAME处，这些寄存器以trapframe这个数据结构的形式保存，这些寄存器中有些在系统调用中非常重要：</p><ul><li>a7寄存器保存了系统调用号</li><li>a1-a6保存了各个系统调用参数</li><li>a0则是系统调用返回值</li></ul><p>内核想要知道系统调用号、系统调用参数，就需要知道这些寄存器的具体值，但现在的问题是trapframe映射在了用户空间，内核该怎么读取？<br>事实上从init进程来看，内核在创建它时，就为它的页表做了一部分映射，其中就包括trapframe，所以内核是知道trapframe的物理地址的，它将其保存在了PCB中。而init所有的子进程在继承页表时，trapframe的虚拟地址不变，物理地址会变，所以内核会将PCB中记录一并修改。所以，内核只要获取PCB中的trapframe物理地址，就可以轻松地访问用户态下保存的寄存器了。</p><h2 id="3-4-用户空间的工作"><a href="#3-4-用户空间的工作" class="headerlink" title="3.4 用户空间的工作"></a>3.4 用户空间的工作</h2><ul><li>用户发起系统调用后会执行一个ecall指令，ecall会把控制流转移到uservec函数（在trapolin.S中，前面说道stvec保存了这个函数的地址）。</li><li>uservec保存用户空间下的寄存器到trapframe中，同时设置栈、页表等，为进入内核空间做准备，随后将控制流转移到内核的usertrap处。</li></ul><h2 id="3-5-usertrap"><a href="#3-5-usertrap" class="headerlink" title="3.5 usertrap"></a>3.5 usertrap</h2><p>进入内核后首先到usertrap这里，这个函数后面的lab会经常打交道。了解了上面说的种种寄存器后，对系统调用的处理也就水到渠成了。</p><ul><li>sstatus判断是否是用户态引发的trap。</li><li>设置返回用户态的pc，这里注意到如果是系统调用，pc+4即返回到下一条指令。</li><li>判断scause是否为8，8表示这个trap是用户引发的系统调用，随后进入syscall函数来专门处理系统调用。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>((r_sstatus() &amp; SSTATUS_SPP) != <span class="number">0</span>)</span><br><span class="line">    panic(<span class="string">&quot;usertrap: not from user mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// send interrupts and exceptions to kerneltrap(),</span></span><br><span class="line">  <span class="comment">// since we&#x27;re now in the kernel.</span></span><br><span class="line">  w_stvec((uint64)kernelvec);</span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// save user program counter.</span></span><br><span class="line">  p-&gt;trapframe-&gt;epc = r_sepc();</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(r_scause() == <span class="number">8</span>)&#123;</span><br><span class="line">    <span class="comment">// system call</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(killed(p))</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// sepc points to the ecall instruction,</span></span><br><span class="line">    <span class="comment">// but we want to return to the next instruction.</span></span><br><span class="line">    p-&gt;trapframe-&gt;epc += <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// an interrupt will change sepc, scause, and sstatus,</span></span><br><span class="line">    <span class="comment">// so enable only now that we&#x27;re done with those registers.</span></span><br><span class="line">    intr_on();</span><br><span class="line"></span><br><span class="line">    syscall();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-syscall"><a href="#3-6-syscall" class="headerlink" title="3.6 syscall"></a>3.6 syscall</h2><p>代码非常简短，获取系统调用号，在a7寄存器，然后在syscalls这个系统调用表中查找对应的函数执行即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 即系统调用表</span></span><br><span class="line"><span class="type">static</span> <span class="title function_">uint64</span> <span class="params">(*syscalls[])</span><span class="params">(<span class="type">void</span>)</span> = &#123;</span><br><span class="line">  [SYS_fork]    sys_fork,</span><br><span class="line">  [SYS_exit]    sys_exit,</span><br><span class="line">  [SYS_wait]    sys_wait,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span></span><br><span class="line"><span class="title function_">syscall</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> num;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">proc</span> *<span class="title">p</span> =</span> myproc();</span><br><span class="line"></span><br><span class="line">  num = p-&gt;trapframe-&gt;a7;</span><br><span class="line">  <span class="comment">// num = *(int*)0;</span></span><br><span class="line">  <span class="keyword">if</span>(num &gt; <span class="number">0</span> &amp;&amp; num &lt; NELEM(syscalls) &amp;&amp; syscalls[num]) &#123;</span><br><span class="line">    <span class="comment">// Use num to lookup the system call function for num, call it,</span></span><br><span class="line">    <span class="comment">// and store its return value in p-&gt;trapframe-&gt;a0</span></span><br><span class="line">    p-&gt;trapframe-&gt;a0 = syscalls[num]();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %s: unknown sys call %d\n&quot;</span>,</span><br><span class="line">            p-&gt;pid, p-&gt;name, num);</span><br><span class="line">    p-&gt;trapframe-&gt;a0 = <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-sys-sleep"><a href="#3-5-sys-sleep" class="headerlink" title="3.5 sys_sleep"></a>3.5 sys_sleep</h2><p>以sys_sleep系统调用为例，这里唯一需要注意的是参数的获取，前面说过用户寄存器有系统调用的参数，他们都保存在了trapframe中，利用封装的argint函数就可以获得对应的参数了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">uint64</span><br><span class="line"><span class="title function_">sys_sleep</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> n;</span><br><span class="line">  uint ticks0;</span><br><span class="line">  <span class="comment">// 封装的函数，内部直接获取trapframe内保存的用户寄存器</span></span><br><span class="line">  argint(<span class="number">0</span>, &amp;n);</span><br><span class="line">  <span class="keyword">if</span>(n &lt; <span class="number">0</span>)</span><br><span class="line">    n = <span class="number">0</span>;</span><br><span class="line">  acquire(&amp;tickslock);</span><br><span class="line">  ticks0 = ticks;</span><br><span class="line">  <span class="keyword">while</span>(ticks - ticks0 &lt; n)&#123;</span><br><span class="line">    <span class="keyword">if</span>(killed(myproc()))&#123;</span><br><span class="line">      release(&amp;tickslock);</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(&amp;ticks, &amp;tickslock);</span><br><span class="line">  &#125;</span><br><span class="line">  release(&amp;tickslock);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要额外说的是，如果系统调用参数是一个字符串，那么寄存器中获得的是这个字符串的地址，而这个地址是用户态地址，内核想要获得字符串的值就要在内核与用户空间进行数据的传输，这里的具体过程pagetable再讨论。</p><h1 id="4-lab-syscall"><a href="#4-lab-syscall" class="headerlink" title="4. lab syscall"></a>4. lab syscall</h1><p>这个lab分为三个部分，只要熟悉了xv6的系统调用过程，做起来并不困难。</p><h2 id="4-1-gdb"><a href="#4-1-gdb" class="headerlink" title="4.1 gdb"></a>4.1 gdb</h2><p>使用gdb打印几个值回答问题即可，注意gdb调试内核的方法，可以通过file在用户程序和内核程序间跳转。</p><h2 id="4-2-syscall-trace"><a href="#4-2-syscall-trace" class="headerlink" title="4.2 syscall trace"></a>4.2 syscall trace</h2><p>实现一个功能，每次执行系统调用时，在stdout上打印出系统调用名和返回值，在上一章所示的syscall函数中加个printf即可，不贴代码了。</p><h2 id="4-3-sysinfo"><a href="#4-3-sysinfo" class="headerlink" title="4.3 sysinfo"></a>4.3 sysinfo</h2><p>实现一个新的系统调用，功能是打印内核进程状态，这里梳理一下怎么在xv6内添加系统调用。</p><ul><li>在用户空间的系统调用头文件中加sysinfo的声明。</li><li>想要系统调用进入内核态，需要执行ecall指令。xv6提供了usys.pl，只需要在内部写入系统调用名称，make时将会自动生成几行对应的ecall指令。</li><li>有了ecall之后，控制流就可以正确地传递到内核了，接下来需要在系统调用表中注册内核的sysinfo函数，用来执行系统调用。</li><li>最后一步就是实现sysinfo函数了，这是最简单的一部分，遍历一遍内核中进程表统计一下进程，通过trapframe中保存的寄存器返回结果即可。</li></ul><h1 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h1><p>温故而知新</p>]]></content>
    
    
    <summary type="html">本文结合源码梳理了xv6系统的启动过程、系统调用的完整流程，最后简述了如何添加自己的系统调用。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Blog from CSDN</title>
    <link href="http://example.com/2025/01/15/Blog-from-CSDN/"/>
    <id>http://example.com/2025/01/15/Blog-from-CSDN/</id>
    <published>2025-01-15T01:34:54.000Z</published>
    <updated>2025-01-22T15:07:46.012Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_40955029?spm=1000.2115.3001.5343">https://blog.csdn.net/qq_40955029?spm=1000.2115.3001.5343</a></p>]]></content>
    
    
    <summary type="html">以前blog写在csdn了，内容不搬运了，放个链接在这。</summary>
    
    
    
    
  </entry>
  
</feed>
